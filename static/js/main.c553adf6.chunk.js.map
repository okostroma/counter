{"version":3,"sources":["logo.svg","Button.jsx","ButtonArea.jsx","Screen.js","InputArea.jsx","Display.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","noHover1","this","props","state","counter","maxValue","onEditMode","noHover2","noButtonHover","className","onClick","func","disabled","value","React","Component","ButtonArea","incButton","countReset","Screen","newClass","maxEl","digit","InputArea","errorValue","errorValueM","min","onChange","setMaxValue","type","setCounter","Display","isValueChanged","setSetButton","App","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getItem","parse","setState","e","currentTarget","valueAsNumber","number","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c553adf6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './App.css';\n\nclass Button extends React.Component {\n\n\n    render() {\n        let noHover1 = this.props.state.counter < 0 || this.props.state.counter >= this.props.state.maxValue\n            || !(this.props.state.onEditMode);\n        let noHover2 = this.props.state.maxValue < 0 || this.props.state.maxValue <= this.props.state.counter\n            || !(this.props.state.onEditMode);\n\n        let noButtonHover = (noHover1 || noHover2) ? 'noHover' : ''\n\n\n        return (\n\n\n\n            <div>\n                <button className={`button + ${noButtonHover}`} onClick={this.props.func}\n                        disabled={this.props.disabled} >{this.props.value}\n                </button>\n\n            </div>\n\n\n\n        )\n\n    }\n}\n\nexport default Button;\n","import React from 'react';\nimport './App.css';\nimport Button from \"./Button\";\n\nclass ButtonArea extends React.Component {\n\n\n    render() {\n\n\n        return (\n\n\n            <div className='buttonsArea'>\n\n                <Button func={this.props.incButton} state={this.props.state} value='inc'\n                        disabled={this.props.state.counter === this.props.state.maxValue || !(this.props.state.onEditMode)}/>\n                <Button func={this.props.countReset} state={this.props.state}  value='reset'\n                        disabled={this.props.state.counter === this.props.state.maxValue || !(this.props.state.onEditMode)}/>\n            </div>\n\n\n\n\n\n        )\n\n    }\n}\n\nexport default ButtonArea;\n","import React from 'react';\n\nimport './App.css';\n\n\nclass Screen extends React.Component {\n\n\n\n\n    render () {\n        let newClass = this.props.state.counter === this.props.state.maxValue || this.props.state.counter >= this.props.state.maxValue\n            || this.props.state.counter < 0 || this.props.state.maxValue < 0 || this.props.state.maxValue <= this.props.state.counter ?\n            \"counter\" : \"\";\n\n        let maxEl = this.props.state.digit === this.props.state.maxValue  ? 'counter' : ''\n\n\n\n    return (\n\n          <div className='screen'>\n              <span className={`maxValue + ${newClass}`}>\n\n\n                  { this.props.state.counter === this.props.state.maxValue || this.props.state.counter >= this.props.state.maxValue\n                  || this.props.state.counter < 0 || this.props.state.maxValue < 0\n                  || this.props.state.maxValue <= this.props.state.counter ? <span className='incorrectValue'> incorrect value!!!</span> :\n                      !(this.props.state.onEditMode) ?\n                      <span className='set'> Enter values and press 'Set'</span> : <span className={`digit + ${maxEl}`}>{this.props.state.digit}</span>\n\n                  }\n\n              </span>\n          </div>\n\n\n    )\n\n  }\n}\n\nexport default Screen;\n","import React from 'react';\nimport './App.css';\n\nclass InputArea extends React.Component {\n\n// state={\n//     minStart: -1,\n//     minMax: 0\n// }\n\n\n\n\n\n    render() {\n\n        let incorrectCounter = this.props.state.counter < 0 || this.props.state.counter >= this.props.state.maxValue;\n        let incorrectMaxValue = this.props.state.maxValue < 0 || this.props.state.maxValue <= this.props.state.counter;\n\n        let errorValue = incorrectCounter  ? 'incorrect' : ''\n        let errorValueM = incorrectMaxValue  ? 'incorrect' : ''\n\n\n\n        return (\n\n\n            <div className='inputArea'>\n                <div className='input'>\n                    <span className='title'>Max value</span>\n                   <input min={1} className={errorValueM} onChange={this.props.setMaxValue} value={this.props.state.maxValue} type='number'/>\n\n                </div>\n                <div className='input'>\n                    <span className='title'>Start value</span>\n                     <input min={-1} className={errorValue} onChange={this.props.setCounter} value={this.props.state.counter} type='number' />\n                </div>\n\n            </div>\n\n\n        )\n\n    }\n}\n\nexport default InputArea;\n","import React from 'react';\n\nimport './App.css';\nimport ButtonArea from \"./ButtonArea\";\nimport Screen from \"./Screen\";\nimport Button from \"./Button\";\nimport InputArea from \"./InputArea\";\n\nclass Display extends React.Component {\n\n\n    render() {\n\n\n        return (\n            <div className=\"displays\">\n                <div className=\"display-1\">\n                    <InputArea setMaxValue={this.props.setMaxValue} setCounter={this.props.setCounter}  isValueChanged={this.props.isValueChanged} state={this.props.state}/>\n                    <div className='buttonArea'>\n                        <Button func={this.props.setSetButton}  state={this.props.state} disabled={this.props.state.counter === this.props.state.maxValue} value='set'/>\n                    </div>\n                </div>\n\n                <div className=\"display-2\">\n                    <Screen setSetButton={this.props.setSetButton} state={this.props.state}/>\n                    <ButtonArea incButton={this.props.incButton} state={this.props.state}\n                                countReset={this.props.countReset}/>\n                </div>\n            </div>\n\n\n        )\n\n    }\n}\n\nexport default Display;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Display from \"./Display\";\n\nclass App extends React.Component {\n    componentDidMount() {\n        this.restoreState();\n    }\n\n\n    state = {\n        counter: 0,\n        maxValue: 5,\n        onEditMode: false,\n        digit: 0\n\n    };\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem('state', stateAsString)\n\n    }\n\n    restoreState = () => {\n        let state = this.state;\n        let stateAsString = localStorage.getItem('state');\n        if (stateAsString) {\n            state = JSON.parse(stateAsString);\n        }\n        this.setState(state)\n\n    }\n\n    setMaxValue = (e) => {\n        this.setState({\n            maxValue: e.currentTarget.valueAsNumber,\n            onEditMode: false\n        }, this.saveState)\n\n    }\n\n\n    setCounter = (e) => {\n        this.setState({\n            counter: e.currentTarget.valueAsNumber,\n            onEditMode: false\n        }, this.saveState)\n    }\n\n\n    setSetButton = () => {\n        this.setState({\n            digit: this.state.counter,\n            onEditMode: true\n        }, this.saveState)\n    }\n\n    incButton = () => {\n        let number = this.state.digit;\n        number < this.state.maxValue && number++\n        this.setState({\n            digit: number\n        }, this.saveState)\n    }\n\n\n    countReset = () => {\n        this.setState({\n            digit: this.state.counter\n        }, this.saveState)\n\n\n    }\n\n\n    render() {\n\n\n        return (\n            <div className=\"App\">\n                <Display incButton={this.incButton} setSetButton={this.setSetButton} setMaxValue={this.setMaxValue}\n                         setCounter={this.setCounter} state={this.state}\n                         countReset={this.countReset}/>\n            </div>\n        )\n\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}